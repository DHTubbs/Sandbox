(* Model Identifiers
     Component (Number):  ()
         Class (Number): Tracking Point ()
         Qualified Name: 
   
Description: Assigner (class) state machine for class Tracking Point__

*)

SBR( cls_tracking_point__ );

cls_tracking_point__.asm.b_done := b_FALSE;

while (Not cls_tracking_point__.asm.b_done) do
	cls_tracking_point__.asm.b_done := b_TRUE;
	case (cls_tracking_point__.d_current_state) of
	0:  (* Not Created *)
	
		(* Exit Conditions *)
		if (cls_tracking_point__.events.b_creation_event) then
			(* Consume the Event *)
			cls_tracking_point__.events.b_creation_event := b_FALSE;

			cls_tracking_point__.d_current_state := 1;
			cls_tracking_point__.asm.b_txn := b_FALSE  (* Technically not a state change.  No entry action. *)
			cls_tracking_point__.asm.b_done := b_FALSE;
		end_if;

	1:  (* State: 'CorrectForVelocity' *)
		(* Entry Action *)
		if (cls_tracking_point__.asm.b_txn) then
			cls_tracking_point__.asm.b_txn := b_FALSE
			
			(*  Action:
				
				// Update the position of all tracking points
				
				// Obtain the current velocity of the sheet handling system
				sheet_handler_velocity = 0; // velocity from required interface
				   
				select many tracking_points from TRKPT;
				for each tracking_point in tracking_points;
				   // x0 = x1 - (v0 * t) : Not accounting for acceleration changes
				   tracking_point.effective_position = tracking_point.actual_position - (sheet_handler_velocity * tracking_point.offset_time); // * scaling for proper units; 
				   
				end for;
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (cls_tracking_point__.events.b_correct_position) then
			(* Exit Action *)

			(* Consume the Event *)
			cls_tracking_point__.events.b_correct_position := b_FALSE;

			cls_tracking_point__.d_current_state := 1;
			cls_tracking_point__.asm.b_txn := b_TRUE;
			cls_tracking_point__.asm.b_done := b_FALSE;
			
		end_if;

	else (* Invalid State - End of 'case' *)
		(* The state machine was directed to an invalid state.  Either a programming
		   error was made or a hardware failure has occurred in the PLC. *)
		
		(* TODO: Add a Diagnostic here. *)
		
		cls_tracking_point__.d_current_state := 1;
		cls_tracking_point__.asm.b_txn := b_FALSE;
		cls_tracking_point__.asm.b_done := b_FALSE;
	end_case;
end_while;
