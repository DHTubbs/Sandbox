(* Model Identifiers
     Component (Number): 'Diverter' (800)
         Class (Number): 'Conveyor Length Rollout' (015)
         Qualified Name: 'Diverter::Design::Model::Diverter::CrossTransferConveyorControl::Conveyor Length Rollout'
   
Description: 

Signature: JSR( _800_015_smConveyorLengthRollout );
*)

SBR(  );

_obj.conveyor_length_rollout_800_015.ism.b_done := b_FALSE;

while (Not _obj.conveyor_length_rollout_800_015.ism.b_done) do
	_obj.conveyor_length_rollout_800_015.ism.b_done := b_TRUE;
	case (_obj.conveyor_length_rollout_800_015.d_current_state) of
	0:  (* Uninstantiated Instance *)
	
		(* Exit Conditions *)
		if (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_creation_event) then
			(* Consume the Event *)
			_obj.conveyor_length_rollout_800_015.events.evt_lst.b_creation_event := b_FALSE;

			_obj.conveyor_length_rollout_800_015.d_current_state := 1;
			_obj.conveyor_length_rollout_800_015.ism.b_txn := b_FALSE;
			_obj.conveyor_length_rollout_800_015.ism.b_done := b_FALSE;
		end_if;

	1:  (* State: 'Waiting' *)
		(* Entry Action *)
		if (_obj.conveyor_length_rollout_800_015.ism.b_txn) then
			_obj.conveyor_length_rollout_800_015.ism.b_txn := b_FALSE;
			
			(*  Action:
				
				
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_initiate_auto_seq) then
			(* Exit Action *)

			(* Consume the Event *)
			_obj.conveyor_length_rollout_800_015.events.evt_lst.b_initiate_auto_seq := b_FALSE;

			_obj.conveyor_length_rollout_800_015.d_current_state := 2;
			_obj.conveyor_length_rollout_800_015.ism.b_txn := b_TRUE;
			_obj.conveyor_length_rollout_800_015.ism.b_done := b_FALSE;
			
		elsif (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_jog_time_expired) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_jog_complete) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_motor_stopped) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	2:  (* State: 'InitiatingConveyorJog' *)
		(* Entry Action *)
		if (_obj.conveyor_length_rollout_800_015.ism.b_txn) then
			_obj.conveyor_length_rollout_800_015.ism.b_txn := b_FALSE;
			
			(*  Action:
				
				// Run the conveyor long enough for it to clear it's length
				
				select one auto_seq related by self->AUTOSEQ[R9];
				xtfrcnvr::jog(direction: auto_seq.motor_direction, 
				               velocity: -1, 
				           acceleration: -1, 
				               duration: auto_seq.time_to_run);
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_motor_stopped) then
			(* Exit Action *)

			(* Consume the Event *)
			_obj.conveyor_length_rollout_800_015.events.evt_lst.b_motor_stopped := b_FALSE;

			_obj.conveyor_length_rollout_800_015.d_current_state := 3;
			_obj.conveyor_length_rollout_800_015.ism.b_txn := b_TRUE;
			_obj.conveyor_length_rollout_800_015.ism.b_done := b_FALSE;
			
		elsif (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_jog_time_expired) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_initiate_auto_seq) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_jog_complete) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	3:  (* State: 'MotorStopConfirmed' *)
		(* Entry Action *)
		if (_obj.conveyor_length_rollout_800_015.ism.b_txn) then
			_obj.conveyor_length_rollout_800_015.ism.b_txn := b_FALSE;
			
			(*  Action:
				
				// The move is complete, clean up and notify Cross Transfer Conveyor
				select one auto_seq related by self->AUTOSEQ[R9];
				select one xtfr_conveyor related by auto_seq->XTFRCNVR[R8];
				
				unrelate auto_seq from xtfr_conveyor across R8;
				unrelate self from auto_seq across R9;
				
				generate XTFRCNVR7:automatic_sequence_cmplt() to xtfr_conveyor;
				
				delete object instance self;
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_jog_time_expired) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_initiate_auto_seq) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_jog_complete) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.conveyor_length_rollout_800_015.events.evt_lst.b_motor_stopped) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	else (* Invalid State - End of 'case' *)
		(* The state machine was directed to an invalid state.  Either a programming
		   error was made or a hardware failure has occurred in the PLC. *)
		
		(* TODO: Add a Diagnostic here. *)
		
		_obj.conveyor_length_rollout_800_015.d_current_state := 0;
		_obj.conveyor_length_rollout_800_015.ism.b_txn := b_FALSE;
		_obj.conveyor_length_rollout_800_015.ism.b_done := b_FALSE;
	end_case;
end_while;
