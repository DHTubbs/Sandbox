(* Model Identifiers
     Component (Number):  ()
         Class (Number): Hesitating Rollout ()
         Qualified Name: 
   
Description: 

*)

SBR( obj_hesitating_rollout__ );

obj_hesitating_rollout__.ism.b_done := b_FALSE;

while (Not obj_hesitating_rollout__.ism.b_done) do
	obj_hesitating_rollout__.ism.b_done := b_TRUE;
	case (obj_hesitating_rollout__.d_current_state) of
	0:  (* Uninstantiated Instance *)
	
		(* Exit Conditions *)
		if (obj_hesitating_rollout__.events.b_creation_event) then
			(* Consume the Event *)
			obj_hesitating_rollout__.events.b_creation_event := b_FALSE;

			obj_hesitating_rollout__.d_current_state := 1;
			obj_hesitating_rollout__.ism.b_txn := b_TRUE;
			obj_hesitating_rollout__.ism.b_done := b_FALSE;
		end_if;

	1:  (* State: 'Waiting' *)
		(* Entry Action *)
		if (obj_hesitating_rollout__.ism.b_txn) then
			obj_hesitating_rollout__.ism.b_txn := b_FALSE
			
			(*  Action:
				
				
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (obj_hesitating_rollout__.events.b_initiate_auto_seq_dht) then
			(* Exit Action *)

			(* Consume the Event *)
			obj_hesitating_rollout__.events.b_initiate_auto_seq_dht := b_FALSE;

			obj_hesitating_rollout__.d_current_state := 2;
			obj_hesitating_rollout__.ism.b_txn := b_TRUE;
			obj_hesitating_rollout__.ism.b_done := b_FALSE;
			
		elsif (obj_hesitating_rollout__.events.b_jog_time_expired) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_hesitating_rollout__.events.b_jog_complete) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_hesitating_rollout__.events.b_motor_stopped) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	2:  (* State: 'FirstMove' *)
		(* Entry Action *)
		if (obj_hesitating_rollout__.ism.b_txn) then
			obj_hesitating_rollout__.ism.b_txn := b_FALSE
			
			(*  Action:
				
				// Run the conveyor for a short time in the desired direction. 
				// 
				
				
				select one auto_seq related by self->AUTOSEQ[R9];
				
				// Jog the conveyor for a short time
				xtfrcnvr::jog(direction: auto_seq.motor_direction, velocity: -1, acceleration: -1, duration: self.preliminary_move_time);
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (obj_hesitating_rollout__.events.b_jog_complete) then
			(* Exit Action *)

			(* Consume the Event *)
			obj_hesitating_rollout__.events.b_jog_complete := b_FALSE;

			obj_hesitating_rollout__.d_current_state := 3;
			obj_hesitating_rollout__.ism.b_txn := b_TRUE;
			obj_hesitating_rollout__.ism.b_done := b_FALSE;
			
		elsif (obj_hesitating_rollout__.events.b_jog_time_expired) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_hesitating_rollout__.events.b_initiate_auto_seq_dht) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_hesitating_rollout__.events.b_motor_stopped) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	3:  (* State: 'BackupMove' *)
		(* Entry Action *)
		if (obj_hesitating_rollout__.ism.b_txn) then
			obj_hesitating_rollout__.ism.b_txn := b_FALSE
			
			(*  Action:
				
				// Run the conveyor in the opposite direction for the same time as done in the 
				//    previous move to free any scrap sheets that are lodged.
				// 
				
				
				select one auto_seq related by self->AUTOSEQ[R9];
				
				motor_dir = Motor_Direction::Forward;
				if auto_seq.motor_direction == Motor_Direction::Forward;
				   motor_dir = Motor_Direction::Reverse;
				end if;
				
				// Jog the conveyor for a short time in the opposite direction
				xtfrcnvr::jog(direction: motor_dir, velocity: -1, acceleration: -1, duration: self.preliminary_move_time);
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (obj_hesitating_rollout__.events.b_jog_complete) then
			(* Exit Action *)

			(* Consume the Event *)
			obj_hesitating_rollout__.events.b_jog_complete := b_FALSE;

			obj_hesitating_rollout__.d_current_state := 4;
			obj_hesitating_rollout__.ism.b_txn := b_TRUE;
			obj_hesitating_rollout__.ism.b_done := b_FALSE;
			
		elsif (obj_hesitating_rollout__.events.b_jog_time_expired) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_hesitating_rollout__.events.b_initiate_auto_seq_dht) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_hesitating_rollout__.events.b_motor_stopped) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	4:  (* State: 'FullLengthMove' *)
		(* Entry Action *)
		if (obj_hesitating_rollout__.ism.b_txn) then
			obj_hesitating_rollout__.ism.b_txn := b_FALSE
			
			(*  Action:
				
				// Run the conveyor to discharge the scrap
				// 
				
				
				select one auto_seq related by self->AUTOSEQ[R9];
				
				xtfrcnvr::jog(direction: auto_seq.motor_direction, velocity: -1, acceleration: -1, duration: auto_seq.time_to_run);
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (obj_hesitating_rollout__.events.b_motor_stopped) then
			(* Exit Action *)

			(* Consume the Event *)
			obj_hesitating_rollout__.events.b_motor_stopped := b_FALSE;

			obj_hesitating_rollout__.d_current_state := 5;
			obj_hesitating_rollout__.ism.b_txn := b_TRUE;
			obj_hesitating_rollout__.ism.b_done := b_FALSE;
			
		elsif (obj_hesitating_rollout__.events.b_jog_time_expired) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_hesitating_rollout__.events.b_initiate_auto_seq_dht) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_hesitating_rollout__.events.b_jog_complete) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	5:  (* State: 'ConveyorEmpty' *)
		(* Entry Action *)
		if (obj_hesitating_rollout__.ism.b_txn) then
			obj_hesitating_rollout__.ism.b_txn := b_FALSE
			
			(*  Action:
				
				// The move is complete, clean up and notify Cross Transfer Conveyor
				select one auto_seq related by self->AUTOSEQ[R9];
				select one xtfr_conveyor related by auto_seq->XTFRCNVR[R8];
				
				unrelate auto_seq from xtfr_conveyor across R8;
				unrelate self from auto_seq across R9;
				
				generate XTFRCNVR7:automatic_sequence_cmplt() to xtfr_conveyor;
				
				delete object instance self;
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (obj_hesitating_rollout__.events.b_initiate_auto_seq_dht) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_hesitating_rollout__.events.b_jog_complete) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_hesitating_rollout__.events.b_motor_stopped) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	else (* Invalid State - End of 'case' *)
		(* The state machine was directed to an invalid state.  Either a programming
		   error was made or a hardware failure has occurred in the PLC. *)
		
		(* TODO: Add a Diagnostic here. *)
		
		obj_hesitating_rollout__.d_current_state := 0;
		obj_hesitating_rollout__.ism.b_txn := b_FALSE;
		obj_hesitating_rollout__.ism.b_done := b_FALSE;
	end_case;
end_while;
