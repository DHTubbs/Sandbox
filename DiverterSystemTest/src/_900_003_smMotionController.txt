(* Model Identifiers
     Component (Number): 'Velocity Control Drive' (900)
         Class (Number): 'Motion Controller' (003)
         Qualified Name: 'VelocityControlDrive::Design::Velocity Control Drive::Subsys::Motion Controller'
   
Description: 

Signature: JSR( _900_003_smMotionController );
*)

SBR(  );

TONR(_obj.motion_controller_900_003.tmr_move_timer);

_obj.motion_controller_900_003.ism.b_done := b_FALSE;

while (Not _obj.motion_controller_900_003.ism.b_done) do
	_obj.motion_controller_900_003.ism.b_done := b_TRUE;
	case (_obj.motion_controller_900_003.d_current_state) of
	0:  (* Uninstantiated Instance *)
	
		(* Exit Conditions *)
		if (_obj.motion_controller_900_003.events.evt_lst.b_creation_event) then
			(* Consume the Event *)
			_obj.motion_controller_900_003.events.evt_lst.b_creation_event := b_FALSE;

			_obj.motion_controller_900_003.d_current_state := 1;
			_obj.motion_controller_900_003.ism.b_txn := b_FALSE;
			_obj.motion_controller_900_003.ism.b_done := b_FALSE;
		end_if;

	1:  (* State: 'Idle' *)
		(* Entry Action *)
		if (_obj.motion_controller_900_003.ism.b_txn) then
			_obj.motion_controller_900_003.ism.b_txn := b_FALSE;
			
			(*  Action:
				
				generate MI_A3:motion_complete() to MI assigner;
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (_obj.motion_controller_900_003.events.evt_lst.b_jog_cmd) then
			(* Exit Action *)

			(* Consume the Event *)
			_obj.motion_controller_900_003.events.evt_lst.b_jog_cmd := b_FALSE;

			_obj.motion_controller_900_003.d_current_state := 2;
			_obj.motion_controller_900_003.ism.b_txn := b_TRUE;
			_obj.motion_controller_900_003.ism.b_done := b_FALSE;
			
		elsif (_obj.motion_controller_900_003.events.evt_lst.b_drive_in_progress) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.motion_controller_900_003.events.evt_lst.b_end_move) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	2:  (* State: 'InitiateMove' *)
		(* Entry Action *)
		if (_obj.motion_controller_900_003.ism.b_txn) then
			_obj.motion_controller_900_003.ism.b_txn := b_FALSE;
			
			(*  Action:
				
				// Start the move. 
				// 
				
				
				// Jog the motor
				drive::jog_motor(motor_direction: rcvd_evt.direction,
				                        velocity: rcvd_evt.velocity, 
				                    acceleration: rcvd_evt.acceleration);
				
				self.move_duration = rcvd_evt.duration;
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (_obj.motion_controller_900_003.events.evt_lst.b_drive_in_progress) then
			(* Exit Action *)

			(* Consume the Event *)
			_obj.motion_controller_900_003.events.evt_lst.b_drive_in_progress := b_FALSE;

			_obj.motion_controller_900_003.d_current_state := 3;
			_obj.motion_controller_900_003.ism.b_txn := b_TRUE;
			_obj.motion_controller_900_003.ism.b_done := b_FALSE;
			
		elsif (_obj.motion_controller_900_003.events.evt_lst.b_jog_cmd) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.motion_controller_900_003.events.evt_lst.b_end_move) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	3:  (* State: 'Moving' *)
		(* Entry Action *)
		if (_obj.motion_controller_900_003.ism.b_txn) then
			_obj.motion_controller_900_003.ism.b_txn := b_FALSE;
			
			(*  Action:
				
				// The move has started.  If a duration is set, start a timer to stop the move
				//    after the specified amount of time. 
				
				   
				if self.move_duration > 0;
				   create event instance timer_expired of MC3:end_move() to self;
				   self.move_timer = 
				            TIM::timer_start(microseconds: self.move_duration * 1000, 
				                               event_inst: timer_expired);
				end if;
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (_obj.motion_controller_900_003.events.evt_lst.b_jog_cmd) then
			(* Exit Action *)
			(*  Action:
				
				// If the timer is running stop it.
				
				existed = TIM::timer_cancel(timer_inst_ref: self.move_timer);
			*)

			(* TODO: Implement event action code here *)
			

			(* Consume the Event *)
			_obj.motion_controller_900_003.events.evt_lst.b_jog_cmd := b_FALSE;

			_obj.motion_controller_900_003.d_current_state := 2;
			_obj.motion_controller_900_003.ism.b_txn := b_TRUE;
			_obj.motion_controller_900_003.ism.b_done := b_FALSE;
			
		elsif (_obj.motion_controller_900_003.events.evt_lst.b_end_move) then
			(* Exit Action *)
			(*  Action:
				
				// If the timer is running stop it.
				
				existed = TIM::timer_cancel(timer_inst_ref: self.move_timer);
			*)

			(* TODO: Implement event action code here *)
			

			(* Consume the Event *)
			_obj.motion_controller_900_003.events.evt_lst.b_end_move := b_FALSE;

			_obj.motion_controller_900_003.d_current_state := 4;
			_obj.motion_controller_900_003.ism.b_txn := b_TRUE;
			_obj.motion_controller_900_003.ism.b_done := b_FALSE;
			
		elsif (_obj.motion_controller_900_003.events.evt_lst.b_drive_in_progress) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	4:  (* State: 'InitiateStop' *)
		(* Entry Action *)
		if (_obj.motion_controller_900_003.ism.b_txn) then
			_obj.motion_controller_900_003.ism.b_txn := b_FALSE;
			
			(*  Action:
				
				// Set the motor speed to zero
				drive::stop_motor();
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (_obj.motion_controller_900_003.events.evt_lst.b_drive_done) then
			(* Exit Action *)

			(* Consume the Event *)
			_obj.motion_controller_900_003.events.evt_lst.b_drive_done := b_FALSE;

			_obj.motion_controller_900_003.d_current_state := 1;
			_obj.motion_controller_900_003.ism.b_txn := b_TRUE;
			_obj.motion_controller_900_003.ism.b_done := b_FALSE;
			
		elsif (_obj.motion_controller_900_003.events.evt_lst.b_jog_cmd) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.motion_controller_900_003.events.evt_lst.b_drive_in_progress) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (_obj.motion_controller_900_003.events.evt_lst.b_end_move) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	else (* Invalid State - End of 'case' *)
		(* The state machine was directed to an invalid state.  Either a programming
		   error was made or a hardware failure has occurred in the PLC. *)
		
		(* TODO: Add a Diagnostic here. *)
		
		_obj.motion_controller_900_003.d_current_state := 0;
		_obj.motion_controller_900_003.ism.b_txn := b_FALSE;
		_obj.motion_controller_900_003.ism.b_done := b_FALSE;
	end_case;
end_while;
