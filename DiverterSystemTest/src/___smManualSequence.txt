(* Model Identifiers
     Component (Number):  ()
         Class (Number): Manual Sequence ()
         Qualified Name: 
   
Description: 

*)

SBR( obj_manual_sequence__ );

obj_manual_sequence__.ism.b_done := b_FALSE;

while (Not obj_manual_sequence__.ism.b_done) do
	obj_manual_sequence__.ism.b_done := b_TRUE;
	case (obj_manual_sequence__.d_current_state) of
	0:  (* Uninstantiated Instance *)
	
		(* Exit Conditions *)
		if (obj_manual_sequence__.events.b_creation_event) then
			(* Consume the Event *)
			obj_manual_sequence__.events.b_creation_event := b_FALSE;

			obj_manual_sequence__.d_current_state := 1;
			obj_manual_sequence__.ism.b_txn := b_TRUE;
			obj_manual_sequence__.ism.b_done := b_FALSE;
		end_if;

	1:  (* State: 'Stopped' *)
		(* Entry Action *)
		if (obj_manual_sequence__.ism.b_txn) then
			obj_manual_sequence__.ism.b_txn := b_FALSE
			
			(*  Action:
				
				// Check to see if the switch position has changed and if so initiate a jog.
				// 
				
				
				position = Client::get_xtfr_jog_switch_position();
				
				if position == Jog_Switch_Position::Operator;
				   generate XTFRCNVR3:jog(direction: Machine_Side::Operator) to self;
				elif position == Jog_Switch_Position::Drive;
				   generate XTFRCNVR3:jog(direction: Machine_Side::Drive) to self;
				end if;
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (obj_manual_sequence__.events.b_jog) then
			(* Exit Action *)

			(* Consume the Event *)
			obj_manual_sequence__.events.b_jog := b_FALSE;

			obj_manual_sequence__.d_current_state := 2;
			obj_manual_sequence__.ism.b_txn := b_TRUE;
			obj_manual_sequence__.ism.b_done := b_FALSE;
			
		elsif (obj_manual_sequence__.events.b_enable_control) then
			(* Exit Action *)

			(* Consume the Event *)
			obj_manual_sequence__.events.b_enable_control := b_FALSE;

			obj_manual_sequence__.d_current_state := 1;
			obj_manual_sequence__.ism.b_txn := b_TRUE;
			obj_manual_sequence__.ism.b_done := b_FALSE;
			
		elsif (obj_manual_sequence__.events.b_jog_complete) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_manual_sequence__.events.b_drive_rdy_for_inst) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	2:  (* State: 'InitiateJog' *)
		(* Entry Action *)
		if (obj_manual_sequence__.ism.b_txn) then
			obj_manual_sequence__.ism.b_txn := b_FALSE
			
			(*  Action:
				
				// Jog the conveyor to the requested side
				// 
				
				
				// Save the requested direction
				self.jog_direction = rcvd_evt.direction;
				
				// Translate the machine side into a motor direction then jog conveyor.
				select one conveyor related by self->XTFRCNVR[R8];
				xtfrcnvr::jog(direction: conveyor.GetMotorDirection(machine_side: rcvd_evt.direction),
				               velocity: -1, 
				           acceleration: -1, 
				               duration: 0000);  // 30 seconds max jog duration, 0 for testing
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (obj_manual_sequence__.events.b_drive_rdy_for_inst) then
			(* Exit Action *)

			(* Consume the Event *)
			obj_manual_sequence__.events.b_drive_rdy_for_inst := b_FALSE;

			obj_manual_sequence__.d_current_state := 3;
			obj_manual_sequence__.ism.b_txn := b_TRUE;
			obj_manual_sequence__.ism.b_done := b_FALSE;
			
		elsif (obj_manual_sequence__.events.b_jog) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_manual_sequence__.events.b_jog_complete) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_manual_sequence__.events.b_motor_stopped) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_manual_sequence__.events.b_enable_control) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	3:  (* State: 'ConfirmedMoving' *)
		(* Entry Action *)
		if (obj_manual_sequence__.ism.b_txn) then
			obj_manual_sequence__.ism.b_txn := b_FALSE
			
			(*  Action:
				
				// Check to see if the switch position has changed and if so initiate a stop.
				// 
				
				
				position = Client::get_xtfr_jog_switch_position();
				
				if ((position == Jog_Switch_Position::Stop) or
				    (position == Jog_Switch_Position::Operator and self.jog_direction == Machine_Side::Drive) or
				    (position == Jog_Switch_Position::Drive and self.jog_direction == Machine_Side::Operator)
				   );
				   // The switch position doesn't agree with what the conveyor is doing, stop it.
				   generate XTFRCNVR4:jog_complete() to self;
				end if;
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (obj_manual_sequence__.events.b_jog) then
			(* Exit Action *)

			(* Consume the Event *)
			obj_manual_sequence__.events.b_jog := b_FALSE;

			obj_manual_sequence__.d_current_state := 4;
			obj_manual_sequence__.ism.b_txn := b_TRUE;
			obj_manual_sequence__.ism.b_done := b_FALSE;
			
		elsif (obj_manual_sequence__.events.b_jog_complete) then
			(* Exit Action *)

			(* Consume the Event *)
			obj_manual_sequence__.events.b_jog_complete := b_FALSE;

			obj_manual_sequence__.d_current_state := 4;
			obj_manual_sequence__.ism.b_txn := b_TRUE;
			obj_manual_sequence__.ism.b_done := b_FALSE;
			
		elsif (obj_manual_sequence__.events.b_drive_rdy_for_inst) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_manual_sequence__.events.b_motor_stopped) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_manual_sequence__.events.b_enable_control) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	4:  (* State: 'InitiateStop' *)
		(* Entry Action *)
		if (obj_manual_sequence__.ism.b_txn) then
			obj_manual_sequence__.ism.b_txn := b_FALSE
			
			(*  Action:
				
				// The user has finished moving the cross transfer conveyor
				xtfrcnvr::stop();
			*)

			(* TODO: Implement state action code here *)
			
		end_if;
		
		(* Exit Conditions *)
		if (obj_manual_sequence__.events.b_motor_stopped) then
			(* Exit Action *)

			(* Consume the Event *)
			obj_manual_sequence__.events.b_motor_stopped := b_FALSE;

			obj_manual_sequence__.d_current_state := 1;
			obj_manual_sequence__.ism.b_txn := b_TRUE;
			obj_manual_sequence__.ism.b_done := b_FALSE;
			
		elsif (obj_manual_sequence__.events.b_jog) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_manual_sequence__.events.b_jog_complete) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_manual_sequence__.events.b_drive_rdy_for_inst) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		elsif (obj_manual_sequence__.events.b_enable_control) then
			(* Can't Happen - The model indicates this event cannot occur in this state.
			
			   Description: 
			*)
			
			(* TODO: Add a diagnostic here. *)
			
		end_if;

	else (* Invalid State - End of 'case' *)
		(* The state machine was directed to an invalid state.  Either a programming
		   error was made or a hardware failure has occurred in the PLC. *)
		
		(* TODO: Add a Diagnostic here. *)
		
		obj_manual_sequence__.d_current_state := 0;
		obj_manual_sequence__.ism.b_txn := b_FALSE;
		obj_manual_sequence__.ism.b_done := b_FALSE;
	end_case;
end_while;
